"use client";

import { useState, useEffect } from "react";
import { QBOs } from "@/lib/models/qbo.model";
import { Jobs } from "@/lib/models/job.model";
import { Card } from "@/components/ui/card";
import { Tooltip } from "@/components/ui/tooltip";
import {
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { useToast } from "@/hooks/use-toast";

interface QBOCircleProps {
  onSelectJob?: (jobId: string) => void;
}

export function QBOCircles({ onSelectJob }: QBOCircleProps) {
  const [qbos, setQbos] = useState<QBOs[]>([]);
  const [qboJobsMap, setQboJobsMap] = useState<Record<string, Jobs[]>>({});
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();
  const svgColors = [
    "#FF4136", // Red
    "#0074D9", // Blue
    "#2ECC40", // Green
    "#FF851B", // Orange
    "#B10DC9", // Purple
  ];
  useEffect(() => {
    const fetchQbosAndMappings = async () => {
      try {
        setLoading(true);

        // Fetch all QBOs
        const qboResponse = await fetch("/api/qbos");
        const qboResult = await qboResponse.json();

        if (!qboResult.success) {
          throw new Error("Failed to fetch QBOs");
        }

        const qbosData = qboResult.data;
        setQbos(qbosData);

        // Fetch job mappings for each QBO
        const jobMappingsPromises = qbosData.map(async (qbo: QBOs) => {
          const response = await fetch(
            `/api/qbo-job-mappings?qboId=${qbo._id}`,
          );
          const result = await response.json();

          if (result.success) {
            return { qboId: qbo._id, jobs: result.data };
          }
          return { qboId: qbo._id, jobs: [] };
        });

        const jobMappingsResults = await Promise.all(jobMappingsPromises);

        // Create map of QBO ID to associated jobs
        const qboToJobsMap: Record<string, Jobs[]> = {};
        jobMappingsResults.forEach((result) => {
          qboToJobsMap[result.qboId] = result.jobs;
        });

        setQboJobsMap(qboToJobsMap);
      } catch (error) {
        console.error("Error fetching QBOs and job mappings:", error);
        toast({
          title: "Error",
          description: "Failed to load Outcomes and job data",
          variant: "destructive",
        });
      } finally {
        setLoading(false);
      }
    };

    fetchQbosAndMappings();
  }, [toast]);

  if (loading) {
    return (
      <div className="flex justify-center p-4">Loading Outcome mappings...</div>
    );
  }

  if (qbos.length === 0) {
    return (
      <div className="text-center p-4 text-muted-foreground">
        No QBOs found.
      </div>
    );
  }

  // Helper function to get a color based on the QBO name (for consistent colors per QBO)
  const getQboColor = (qboName: string) => {
    const colors = [
      "bg-blue-100 border-blue-500 text-blue-800",
      "bg-green-100 border-green-500 text-green-800",
      "bg-orange-100 border-orange-500 text-orange-800",
      "bg-violet-100 border-violet-500 text-violet-800",
      "bg-purple-100 border-purple-500 text-purple-800",
      "bg-amber-100 border-amber-500 text-amber-800",
      "bg-rose-100 border-rose-500 text-rose-800",
      "bg-cyan-100 border-cyan-500 text-cyan-800",
    ];

   
    

    // Simple hash function to ensure same QBO always gets same color
    const hash = qboName
      .split("")
      .reduce((acc, char) => acc + char.charCodeAt(0), 0);
    const colorIndex = hash % colors.length;

    return colors[colorIndex];
  };

  return (
    <div className="mb-4">
      <h2 className="text-lg font-semibold mb-6 flex items-center justify-center">
        Outcome-Job matrix
      </h2>
      <div className="flex flex-col gap-10">
        {qbos.map((qbo) => {
          const jobs = qboJobsMap[qbo._id] || [];
          const colorClass = getQboColor(qbo.name);

          return (
            <div key={qbo._id} className="relative group">
              {/* Calculate size based on QBO points */}
              {(() => {
                // Base size for circles
                const baseSize = 180;
                const baseExpandedSize = 280;

                // Calculate size factor based on points (min 1, max 2)
                // This means circles will be between 1x and 2x the base size
                const pointsValue = qbo.points || 1;
                const sizeFactor = Math.max(
                  1,
                  Math.min(2, 1 + pointsValue / 100),
                );

                // Calculate actual dimensions
                const size = Math.round(baseSize * sizeFactor);
                const expandedSize = Math.round(baseExpandedSize * sizeFactor);

                return (
                  <>
                    {/* Normal circle (displayed by default) */}
                    <Card
                      className={`flex flex-col items-center justify-center p-4 rounded-full border-2 ${colorClass} cursor-pointer transition-all duration-300 ease-in-out overflow-hidden mx-auto group-hover:opacity-0 group-hover:invisible`}
                      style={{
                        width: `${size}px`,
                        height: `${size}px`,
                        minWidth: `${size}px`,
                        minHeight: `${size}px`,
                      }}
                    >
                      <div className="font-bold text-center mb-2">
                        {qbo.name}
                      </div>
                      <div className="text-xs text-center opacity-80">
                        {(() => {
                          // Calculate total points across all QBOs
                          const totalPoints = qbos.reduce(
                            (sum, q) => sum + (q.points || 0),
                            0,
                          );
                          // Calculate percentage for this QBO
                          const percentage =
                            totalPoints > 0
                              ? Math.round((qbo.points / totalPoints) * 100)
                              : 0;
                          return `Mission impact: ${percentage}%`;
                        })()}
                      </div>
                      <div className="mt-2 w-full overflow-hidden text-center">
                        {jobs.length === 0 ? (
                          <div className="text-xs italic">No jobs mapped</div>
                        ) : (
                          <div className="flex flex-wrap justify-center gap-1.5">
                            {jobs.map((job,idx) => (
                              <span
                                key={job._id}
                                className="inline-flex items-center justify-center p-1"
                              >
                                <svg 
                                width="13" 
                                height="16" 
                                viewBox="0 0 13 16" 
                                fill="none" 
                                xmlns="http://www.w3.org/2000/svg">
<path d="M2.6296 0.00132173C2.58585 0.0056967 2.5446 0.021947 2.50897 0.0475706C2.3971 0.128819 2.3721 0.285071 2.45335 0.396941L3.73645 2.16875C3.24708 2.41438 2.86083 2.85687 2.70896 3.42374L0.291556 12.4462C0.00781587 13.5043 0.645918 14.5993 1.70904 14.8836L5.62706 15.9336C5.91706 16.0111 6.22017 16.0198 6.51455 15.9648C6.79205 16.0123 7.08267 16.0042 7.37204 15.9267L11.2901 14.8773C12.3544 14.5923 12.992 13.4973 12.7088 12.4406L10.2914 3.41749C10.1376 2.84438 9.74327 2.39876 9.24515 2.15439L10.5176 0.397618H10.517C10.5976 0.285745 10.5726 0.129494 10.4614 0.0482474C10.4076 0.0094976 10.3408 -0.00675175 10.2751 0.00387369C10.2095 0.0144991 10.1508 0.0501226 10.112 0.103872L8.74828 1.98752C8.45704 1.93002 8.14954 1.93503 7.84393 2.0169L6.4902 2.37939L5.15522 2.02189C4.88959 1.95064 4.62148 1.93689 4.3646 1.97189C4.31898 1.97814 4.27336 1.98626 4.22836 1.99564L2.85838 0.103829H2.85775C2.819 0.0500794 2.76088 0.0138303 2.69526 0.0032049C2.67401 7.99879e-05 2.65147 -0.00117823 2.6296 0.00132173ZM8.41447 2.44688L7.30386 3.97998C7.01324 3.72248 6.60138 3.60999 6.19951 3.71749C5.56578 3.88749 5.18389 4.54247 5.35327 5.17435C5.52264 5.80621 6.18138 6.18184 6.81512 6.01246C7.44885 5.84247 7.83073 5.18811 7.66136 4.55623C7.64761 4.5056 7.63074 4.45686 7.61136 4.40998L8.9476 2.56441C9.35572 2.73628 9.68259 3.08565 9.80634 3.54689L12.2237 12.57C12.4375 13.3668 11.9631 14.1799 11.1606 14.3949L7.24261 15.4449C7.03825 15.4999 6.83324 15.5092 6.63699 15.4817C6.60887 15.4711 6.57949 15.4655 6.54949 15.4655C6.01324 15.3561 5.56013 14.9592 5.40951 14.3955L2.99211 5.37245C2.77836 4.57558 3.25273 3.76255 4.05521 3.54752L6.55085 2.87877L6.55023 2.8794C6.5521 2.8794 6.55335 2.87877 6.55523 2.87877C6.55835 2.87752 6.5621 2.87627 6.56523 2.87502L7.97271 2.49815C8.12083 2.45815 8.26959 2.44253 8.4152 2.4469L8.41447 2.44688ZM4.57517 2.45313C4.72267 2.44751 4.87391 2.46376 5.02516 2.50438L5.52328 2.63813L3.92518 3.06563C3.67081 3.13375 3.44144 3.24937 3.24269 3.39874C3.40269 2.98501 3.73393 2.67813 4.13268 2.53751C4.1783 2.53688 4.22268 2.52313 4.26143 2.49939C4.3633 2.47314 4.4683 2.45751 4.57579 2.45376L4.57517 2.45313ZM6.5377 4.17679C6.71894 4.18304 6.88707 4.25991 7.00956 4.38679L6.91894 4.51116C6.83644 4.62491 6.66707 4.69991 6.48458 4.69991C6.30208 4.69991 6.13271 4.62491 6.05021 4.51116L5.98147 4.41616C6.06959 4.31491 6.18772 4.23803 6.32896 4.20053C6.39896 4.18178 6.46957 4.17429 6.5377 4.17679ZM7.19582 4.94678C7.16332 5.2174 6.97019 5.45303 6.6852 5.52926C6.31084 5.62926 5.93459 5.41364 5.83584 5.0449C5.83084 5.02615 5.82709 5.0074 5.82334 4.98803C6.01271 5.13365 6.25208 5.1999 6.48395 5.1999C6.73707 5.1999 6.99895 5.12177 7.19519 4.94616L7.19582 4.94678ZM9.31897 5.17114C9.22585 5.15239 9.13022 5.18739 9.07209 5.26239C8.29148 6.26362 7.66399 6.52987 7.00156 6.70736C6.33914 6.88485 5.66221 6.96798 4.48592 6.49111H4.4853C4.3978 6.45548 4.29717 6.47236 4.22592 6.53548C4.1553 6.59798 4.1253 6.6961 4.1503 6.78735L6.02835 13.796C6.19147 14.4048 6.75709 14.8298 7.32958 14.6767L10.7014 13.7729C11.2739 13.6192 11.5514 12.9679 11.3882 12.3598L9.51019 5.35177V5.35115C9.48581 5.2599 9.41209 5.18989 9.31897 5.17114ZM2.58788 5.80614L2.97788 7.26175L1.61039 12.3654C1.44728 12.9741 1.72477 13.6253 2.29726 13.7785L4.91099 14.4791L4.92349 14.5253C5.00848 14.8428 5.16847 15.1216 5.37785 15.3484L1.83726 14.4003C1.03353 14.1847 0.559775 13.3709 0.772908 12.5754L2.58788 5.80614ZM8.54346 7.54867C8.67658 7.51242 8.81346 7.5918 8.84909 7.72493L9.78907 11.2343L9.7897 11.2349C9.80657 11.2987 9.79782 11.3674 9.7647 11.4249C9.73158 11.4824 9.67657 11.5243 9.61283 11.5412C9.54845 11.5587 9.48033 11.5493 9.42283 11.5162C9.36533 11.4831 9.32346 11.4281 9.30658 11.3643L8.36659 7.85492V7.8543C8.33097 7.72118 8.40971 7.58431 8.54346 7.54867ZM7.33223 7.87304C7.46535 7.83741 7.60285 7.91679 7.63848 8.04991L8.06159 9.62739H8.06097C8.07847 9.69114 8.06972 9.75989 8.0366 9.81739C8.00347 9.87489 7.94847 9.91676 7.88472 9.93364C7.75097 9.96926 7.6141 9.89051 7.57847 9.75676L7.15536 8.17928C7.11973 8.04616 7.19848 7.90867 7.33223 7.87304ZM6.12162 8.1974C6.25475 8.16177 6.39224 8.24052 6.42788 8.37428L6.46225 8.50303C6.49787 8.63615 6.41913 8.77364 6.28537 8.80928C6.15225 8.8449 6.01538 8.76553 5.97974 8.6324L5.94537 8.50365H5.94475C5.90912 8.3699 5.9885 8.23303 6.12162 8.1974ZM6.38037 9.16302C6.5135 9.12739 6.65099 9.20677 6.68662 9.33989L7.62723 12.8493V12.8499C7.66286 12.983 7.58348 13.1199 7.45036 13.1562C7.31723 13.1918 7.17974 13.1124 7.1441 12.9793L6.2035 9.46989V9.46927C6.16787 9.33615 6.24724 9.19927 6.38037 9.16302ZM3.64539 9.75301L3.90414 10.7186L3.46789 12.3455H3.46851C3.43289 12.4792 3.29539 12.558 3.16226 12.5224C3.02913 12.4867 2.94977 12.3499 2.98538 12.2161L3.64539 9.75301ZM7.97908 10.288C8.04346 10.2705 8.11158 10.2793 8.16908 10.3124C8.22658 10.3455 8.26845 10.4005 8.28595 10.4649L8.83782 12.5255C8.87344 12.6586 8.79407 12.7961 8.66094 12.8317C8.52719 12.8674 8.39032 12.788 8.35469 12.6549L7.8022 10.5943C7.76658 10.4605 7.84596 10.3236 7.97908 10.288ZM9.70786 11.8955C9.84098 11.8599 9.97848 11.9386 10.0141 12.0724L10.0485 12.2011C10.0841 12.3343 10.0047 12.4718 9.87161 12.5074C9.73786 12.543 9.60099 12.4636 9.56535 12.3305L9.53098 12.2018C9.49535 12.068 9.57473 11.9311 9.70786 11.8955ZM4.29418 12.1736L4.47605 12.8511C4.44167 12.8567 4.40667 12.8555 4.37355 12.8467C4.2398 12.8111 4.16106 12.6736 4.19667 12.5405L4.29418 12.1736Z" 
                                fill={svgColors[idx % svgColors.length]}/>
</svg>

                              </span>
                            ))}
                          </div>
                        )}
                      </div>
                    </Card>

                    {/* Expanded circle (displayed on hover) */}
                    <Card
                      className={`absolute top-0 left-1/2 -translate-x-1/2 flex flex-col items-center p-5 rounded-3xl border-2 ${colorClass} cursor-pointer transition-all duration-300 ease-in-out opacity-0 invisible group-hover:opacity-100 group-hover:visible max-h-none overflow-y-auto z-10 shadow-lg`}
                      style={{
                        width: `${expandedSize}px`,
                        minHeight: `${expandedSize}px`,
                      }}
                    >
                      <div className="font-bold text-center mb-3 text-lg">
                        {qbo.name}
                      </div>
                      <div className="w-full text-left">
                        {jobs.length === 0 ? (
                          <div className="text-sm italic text-center">
                            No jobs mapped
                          </div>
                        ) : (
                          <ul className="text-sm space-y-2">
                            {jobs.map((job, idx) => (
                              <li
                                key={job._id}
                                className="flex items-center gap-2 p-1.5 hover:bg-white/30 rounded-md transition-colors"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  if (onSelectJob) onSelectJob(job._id);
                                }}
                              >
                            <svg 
                            width="13" 
                            height="16" 
                            viewBox="0 0 13 16" 
                            fill="none" 
                            xmlns="http://www.w3.org/2000/svg">
                            <path d="M2.6296 0.00132173C2.58585 0.0056967 2.5446 0.021947 2.50897 0.0475706C2.3971 0.128819 2.3721 0.285071 2.45335 0.396941L3.73645 2.16875C3.24708 2.41438 2.86083 2.85687 2.70896 3.42374L0.291556 12.4462C0.00781587 13.5043 0.645918 14.5993 1.70904 14.8836L5.62706 15.9336C5.91706 16.0111 6.22017 16.0198 6.51455 15.9648C6.79205 16.0123 7.08267 16.0042 7.37204 15.9267L11.2901 14.8773C12.3544 14.5923 12.992 13.4973 12.7088 12.4406L10.2914 3.41749C10.1376 2.84438 9.74327 2.39876 9.24515 2.15439L10.5176 0.397618H10.517C10.5976 0.285745 10.5726 0.129494 10.4614 0.0482474C10.4076 0.0094976 10.3408 -0.00675175 10.2751 0.00387369C10.2095 0.0144991 10.1508 0.0501226 10.112 0.103872L8.74828 1.98752C8.45704 1.93002 8.14954 1.93503 7.84393 2.0169L6.4902 2.37939L5.15522 2.02189C4.88959 1.95064 4.62148 1.93689 4.3646 1.97189C4.31898 1.97814 4.27336 1.98626 4.22836 1.99564L2.85838 0.103829H2.85775C2.819 0.0500794 2.76088 0.0138303 2.69526 0.0032049C2.67401 7.99879e-05 2.65147 -0.00117823 2.6296 0.00132173ZM8.41447 2.44688L7.30386 3.97998C7.01324 3.72248 6.60138 3.60999 6.19951 3.71749C5.56578 3.88749 5.18389 4.54247 5.35327 5.17435C5.52264 5.80621 6.18138 6.18184 6.81512 6.01246C7.44885 5.84247 7.83073 5.18811 7.66136 4.55623C7.64761 4.5056 7.63074 4.45686 7.61136 4.40998L8.9476 2.56441C9.35572 2.73628 9.68259 3.08565 9.80634 3.54689L12.2237 12.57C12.4375 13.3668 11.9631 14.1799 11.1606 14.3949L7.24261 15.4449C7.03825 15.4999 6.83324 15.5092 6.63699 15.4817C6.60887 15.4711 6.57949 15.4655 6.54949 15.4655C6.01324 15.3561 5.56013 14.9592 5.40951 14.3955L2.99211 5.37245C2.77836 4.57558 3.25273 3.76255 4.05521 3.54752L6.55085 2.87877L6.55023 2.8794C6.5521 2.8794 6.55335 2.87877 6.55523 2.87877C6.55835 2.87752 6.5621 2.87627 6.56523 2.87502L7.97271 2.49815C8.12083 2.45815 8.26959 2.44253 8.4152 2.4469L8.41447 2.44688ZM4.57517 2.45313C4.72267 2.44751 4.87391 2.46376 5.02516 2.50438L5.52328 2.63813L3.92518 3.06563C3.67081 3.13375 3.44144 3.24937 3.24269 3.39874C3.40269 2.98501 3.73393 2.67813 4.13268 2.53751C4.1783 2.53688 4.22268 2.52313 4.26143 2.49939C4.3633 2.47314 4.4683 2.45751 4.57579 2.45376L4.57517 2.45313ZM6.5377 4.17679C6.71894 4.18304 6.88707 4.25991 7.00956 4.38679L6.91894 4.51116C6.83644 4.62491 6.66707 4.69991 6.48458 4.69991C6.30208 4.69991 6.13271 4.62491 6.05021 4.51116L5.98147 4.41616C6.06959 4.31491 6.18772 4.23803 6.32896 4.20053C6.39896 4.18178 6.46957 4.17429 6.5377 4.17679ZM7.19582 4.94678C7.16332 5.2174 6.97019 5.45303 6.6852 5.52926C6.31084 5.62926 5.93459 5.41364 5.83584 5.0449C5.83084 5.02615 5.82709 5.0074 5.82334 4.98803C6.01271 5.13365 6.25208 5.1999 6.48395 5.1999C6.73707 5.1999 6.99895 5.12177 7.19519 4.94616L7.19582 4.94678ZM9.31897 5.17114C9.22585 5.15239 9.13022 5.18739 9.07209 5.26239C8.29148 6.26362 7.66399 6.52987 7.00156 6.70736C6.33914 6.88485 5.66221 6.96798 4.48592 6.49111H4.4853C4.3978 6.45548 4.29717 6.47236 4.22592 6.53548C4.1553 6.59798 4.1253 6.6961 4.1503 6.78735L6.02835 13.796C6.19147 14.4048 6.75709 14.8298 7.32958 14.6767L10.7014 13.7729C11.2739 13.6192 11.5514 12.9679 11.3882 12.3598L9.51019 5.35177V5.35115C9.48581 5.2599 9.41209 5.18989 9.31897 5.17114ZM2.58788 5.80614L2.97788 7.26175L1.61039 12.3654C1.44728 12.9741 1.72477 13.6253 2.29726 13.7785L4.91099 14.4791L4.92349 14.5253C5.00848 14.8428 5.16847 15.1216 5.37785 15.3484L1.83726 14.4003C1.03353 14.1847 0.559775 13.3709 0.772908 12.5754L2.58788 5.80614ZM8.54346 7.54867C8.67658 7.51242 8.81346 7.5918 8.84909 7.72493L9.78907 11.2343L9.7897 11.2349C9.80657 11.2987 9.79782 11.3674 9.7647 11.4249C9.73158 11.4824 9.67657 11.5243 9.61283 11.5412C9.54845 11.5587 9.48033 11.5493 9.42283 11.5162C9.36533 11.4831 9.32346 11.4281 9.30658 11.3643L8.36659 7.85492V7.8543C8.33097 7.72118 8.40971 7.58431 8.54346 7.54867ZM7.33223 7.87304C7.46535 7.83741 7.60285 7.91679 7.63848 8.04991L8.06159 9.62739H8.06097C8.07847 9.69114 8.06972 9.75989 8.0366 9.81739C8.00347 9.87489 7.94847 9.91676 7.88472 9.93364C7.75097 9.96926 7.6141 9.89051 7.57847 9.75676L7.15536 8.17928C7.11973 8.04616 7.19848 7.90867 7.33223 7.87304ZM6.12162 8.1974C6.25475 8.16177 6.39224 8.24052 6.42788 8.37428L6.46225 8.50303C6.49787 8.63615 6.41913 8.77364 6.28537 8.80928C6.15225 8.8449 6.01538 8.76553 5.97974 8.6324L5.94537 8.50365H5.94475C5.90912 8.3699 5.9885 8.23303 6.12162 8.1974ZM6.38037 9.16302C6.5135 9.12739 6.65099 9.20677 6.68662 9.33989L7.62723 12.8493V12.8499C7.66286 12.983 7.58348 13.1199 7.45036 13.1562C7.31723 13.1918 7.17974 13.1124 7.1441 12.9793L6.2035 9.46989V9.46927C6.16787 9.33615 6.24724 9.19927 6.38037 9.16302ZM3.64539 9.75301L3.90414 10.7186L3.46789 12.3455H3.46851C3.43289 12.4792 3.29539 12.558 3.16226 12.5224C3.02913 12.4867 2.94977 12.3499 2.98538 12.2161L3.64539 9.75301ZM7.97908 10.288C8.04346 10.2705 8.11158 10.2793 8.16908 10.3124C8.22658 10.3455 8.26845 10.4005 8.28595 10.4649L8.83782 12.5255C8.87344 12.6586 8.79407 12.7961 8.66094 12.8317C8.52719 12.8674 8.39032 12.788 8.35469 12.6549L7.8022 10.5943C7.76658 10.4605 7.84596 10.3236 7.97908 10.288ZM9.70786 11.8955C9.84098 11.8599 9.97848 11.9386 10.0141 12.0724L10.0485 12.2011C10.0841 12.3343 10.0047 12.4718 9.87161 12.5074C9.73786 12.543 9.60099 12.4636 9.56535 12.3305L9.53098 12.2018C9.49535 12.068 9.57473 11.9311 9.70786 11.8955ZM4.29418 12.1736L4.47605 12.8511C4.44167 12.8567 4.40667 12.8555 4.37355 12.8467C4.2398 12.8111 4.16106 12.6736 4.19667 12.5405L4.29418 12.1736Z" 
                            fill={svgColors[idx % svgColors.length]} />
                          </svg>

                                <span className="hover:underline cursor-pointer">
                                  {job.title}
                                </span>
                              </li>
                            ))}
                          </ul>
                        )}
                      </div>
                    </Card>
                  </>
                );
              })()}
            </div>
          );
        })}
      </div>
    </div>
  );
}
